USE WORK.all;
LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;
use work.common_pack.all;


entity cmdProcessor is
port (

      clk: in std_logic;
      reset: in std_logic;
      rxnow: in std_logic;
      rxData: in std_logic_vector (7 downto 0);
      txData: out std_logic_vector (7 downto 0);
      rxdone: out std_logic;
      ovErr: in std_logic;
      framErr: in std_logic;
      txnow: out std_logic;
      txdone: in std_logic;
      start: out std_logic;
      numWords_bcd: out BCD_ARRAY_TYPE(2 downto 0);
      dataReady: in std_logic;
      byte: in std_logic_vector(7 downto 0);
      maxIndex: in BCD_ARRAY_TYPE(2 downto 0);
      dataResults: in CHAR_ARRAY_TYPE(0 to RESULT_BYTE_NUM-1);
      seqDone: in std_logic
    );
 
end;


architecture dataflow of cmdProcessor is
  type state_type is (IDLE,A/a,input_num,valid_num,invalid_num, send_data, tx_ready) 
  signal currentState, nextState: state_type;
  SIGNAL Reg,Out: std_logic_vector(11 downto 0);
  SIGNAL COUNT_PEAK,COUNT_LIST,COUNT_NUM: integer:=0;
begin
 txData <='00000000';--initalisation
 start <='0';
 txnow <='0';
 rxdone <='0';
 

  combi_nextState: process(currentState,rxnow, txdone, seqDone, dataReady)
  begin
    case currentState is
      when IDLE =>
        if rxnow='1' THEN
          nextState <= ANNN;
	else
	  nextState <= IDLE;
        end if;
       
      WHEN A/a =>
        IF rxData='01000001' or '01100001' THEN-------A/a
          nextState <= input_num;
        END IF;
      WHEN input_num =>
	IF rxData >= "00110000" AND rxData <= "00111001" THEN ------number 0-9
          IF COUNT_NNN = 1 THEN-----------'0-9'_'0011'
          Reg(11 downto 8) =  rxData(3 downto 0);
          ELSIF COUNT_NNN = 2 THEN
          Reg( 7 downto 4) = rxData(3 downto 0);
          ELSIF COUNT_NNN = 3 THEN
          Reg(3 downto 0) = rxData (3 downto 0);
          END IF;
	  nextState <= valid_num;
	  ELSE
	    nextState <= invalid_num;
      WHEN valid_num =>
	rxDone <='1';
	nextState <= start_trans;
      WHEN invalid_num;
	nextState <= A/a;
      WHEN start_trans =>
	txData <= rxdData;
	txnow <= '1';
	nextState <= send_data;
      WHEN send_data =>
	txnow <='0';
	rxdome <='0';
	numWords_bcd(0) <= Out(3 downto 0);
	numWords_bcd(1) <= Out(7 downto 4);
	numWords_bcd(3) <= Out(11 downto 8);
	nextState <= tx_ready;
      WHEN tx_ready =>
	txnow <='0';
	IF txdone='1' THEN
	   
	


      when S1_RXDATA =>
        if rxData= '01010000' or '01110000' THEN-----P/p
          nextState <= S2_PEAK;
         
        ELSIF rxData='01001100' or '01101100' THEN ------L/l
          nextState <=S3_LIST;
       
        ELSE
          nextState <= S0_INIT;
         
        END IF;
       
     
      WHEN  S2_PEAK =>
         
          nextState <= S0_INIT;
         
         
      WHEN  S3_LIST =>
       
       
          nextState <= S0_INIT;
      WHEN  S4_NUM;
        
          nextState <= S0_INIT;
         
         
  end process;        
         
     
         
     
   
   
   
   
   
   
  combi_output:process(currentState);
  begin
        when currentState = S2_PEAK;
          txData <= dataResults[3];
          txnow <='1';
          if txdone = '1' THEN
            txnow <='0';            
          end if;
           
          txData <= '00100000';
          txnow <='1';
          if txdone = '1' THEN
            txnow <='0';
          end if;              
   
          txData(7 downto 4) <= '0011';
          txData(3 downto 0) <= maxIndex[2]
          txnow <='1';
          if txdone = '1' THEN
            txnow <='0';
          end if;
         
          txData(7 downto 4) <= '0011';
          txData(3 downto 0) <= maxIndex[1]
          txnow <='1';
          if txdone = '1' THEN
            txnow <='0';
          end if;
         
          txData(7 downto 4) <= '0011';
          txData(3 downto 0) <= maxIndex[0]
          txnow <='1';
          if txdone = '1' THEN
            txnow <='0';
          end if;
         
  end process;        
 
COUNTER_PEAK:PROCESS(RESET,CLK,X)
		BEGIN
		  IF curState=S2_PEAK THEN
		    COUNT_PEAK <=0;
		  ELSIF CLK'EVENT and CLK='1' THEN
		    IF txnow='1' THEN
		      COUNT_PEAK <= COUNT_PEAK +1;
		    END IF;
		  END IF;
		END PROCESS;
       
COUNTER_LIST :PROCESS(RESET,CLK,X)
		BEGIN
		  IF curState=S3_LIST THEN
		    COUNT_LIST <=0;
		  ELSIF CLK'EVENT and CLK='1' THEN
		    IF txnow='1' THEN
		      COUNT_LIST <= COUNT_LIST +1;

		    END IF;
		  END IF;
		END PROCESS;

COUNTER_NUM :PROCESS(RESET,CLK,X)
		BEGIN
		  IF curState=S4_NUMB THEN
		    COUNT_NUM <=0;
		  ELSIF CLK'EVENT and CLK='1' THEN
		    IF txnow='1' THEN
		      COUNT_NUM <= COUNT_NUM +1;
		      ELSIF curState= FIRST THEN
		        COUNT_NUM <=0;
		    END IF;
		  END IF;
		END PROCESS;
 
COUNTER_NNN :PROCESS(RESET,CLK,X)
		BEGIN
		  IF curState=valid THEN
		    COUNT_NNN <=0;
		  ELSIF CLK'EVENT and CLK='1' THEN
		    IF rxnow='1' THEN
		      COUNT_NNN <= COUNT_NNN +1;
		    END IF;
		  END IF;
		END PROCESS
 
       
Register: PROCESS (CLK, Reg, Out)
     BEGIN
       IF CLK'EVENT AND CLK='1' THEN
         Out <= Reg;
       END IF;
     END PROCESS;
  eq_state: PROCESS (CLK, reset)
  BEGIN
    IF reset = '0' THEN
      curState <= INIT;
    ELSIF CLK'EVENT AND CLK='1' THEN
      curState <= nextState;
    END IF;
  END PROCESS; -- seq
